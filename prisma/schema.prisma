generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image             Image[]  @relation("AccountImages")
  orders            Order[]  @relation("AccountOrders")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites    Product[] @relation("Favorites")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String?
  price       Float      @default(0)
  stock       Int        @default(0)
  rating      Int        @default(0)
  colors      Color[]
  sizes       Size[]
  images      Image[]    @relation("ProductImages")
  category    Category[] @relation("CategoryProducts")
  sessions    Session[]  @relation("Favorites")
  orders      Order[]    @relation("OrderProducts")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

enum Color {
  WHITE
  BLACK
  NAVY
  BROWN
}

enum Size {
  XXS
  XS
  S
  M
  L
  XL
  XXL
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  products    Product[]  @relation("CategoryProducts")
  parents     Category[] @relation("CategoryToCategory")
  children    Category[] @relation("CategoryToCategory")
  images      Image[]    @relation("CategoryImages")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Image {
  url      String     @id @unique @default("https://upcdn.io/W142inK/raw/uploads/2024/09/18/4kKto8F28a-no-image.jpg")
  alt      String     @default("No Image")
  user     Account[]  @relation("AccountImages")
  category Category[] @relation("CategoryImages")
  product  Product[]  @relation("ProductImages")
}

model Order {
  id        String    @id @default(cuid())
  account   Account[] @relation("AccountOrders")
  products  Product[] @relation("OrderProducts")
  address   String
  city      String
  state     String
  zip       String
  total     Float
  createdAt DateTime  @default(now())
}
